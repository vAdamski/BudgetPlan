// <auto-generated />
using System;
using BudgetPlan.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BudgetPlan.Persistence.Migrations
{
    [DbContext(typeof(BudgetPlanDbContext))]
    [Migration("20240723234128_RequiredId_Update")]
    partial class RequiredId_Update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BudgetPlan.Domain.Entities.AccessedPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DataAccessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataAccessId");

                    b.ToTable("AccessedPersons");
                });

            modelBuilder.Entity("BudgetPlan.Domain.Entities.BudgetPlanBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BudgetPlanEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DataAccessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateTo")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BudgetPlanEntityId");

                    b.HasIndex("DataAccessId");

                    b.ToTable("BudgetPlanBases");
                });

            modelBuilder.Entity("BudgetPlan.Domain.Entities.BudgetPlanDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BudgetPlanBaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BudgetPlanType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DataAccessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ExpectedAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BudgetPlanBaseId");

                    b.HasIndex("DataAccessId");

                    b.HasIndex("TransactionCategoryId");

                    b.ToTable("BudgetPlanDetails");
                });

            modelBuilder.Entity("BudgetPlan.Domain.Entities.BudgetPlanEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DataAccessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DataAccessId");

                    b.ToTable("BudgetPlanEntities");
                });

            modelBuilder.Entity("BudgetPlan.Domain.Entities.DataAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DataAccesses");
                });

            modelBuilder.Entity("BudgetPlan.Domain.Entities.TransactionCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccessId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BudgetPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OverTransactionCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccessId");

                    b.HasIndex("BudgetPlanId");

                    b.HasIndex("OverTransactionCategoryId");

                    b.ToTable("TransactionCategories");
                });

            modelBuilder.Entity("BudgetPlan.Domain.Entities.TransactionDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AccessId");

                    b.HasIndex("TransactionCategoryId");

                    b.ToTable("TransactionDetails");
                });

            modelBuilder.Entity("BudgetPlan.Domain.Entities.AccessedPerson", b =>
                {
                    b.HasOne("BudgetPlan.Domain.Entities.DataAccess", "DataAccess")
                        .WithMany("AccessedPersons")
                        .HasForeignKey("DataAccessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DataAccess");
                });

            modelBuilder.Entity("BudgetPlan.Domain.Entities.BudgetPlanBase", b =>
                {
                    b.HasOne("BudgetPlan.Domain.Entities.BudgetPlanEntity", "BudgetPlanEntity")
                        .WithMany("BudgetPlanBases")
                        .HasForeignKey("BudgetPlanEntityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BudgetPlan.Domain.Entities.DataAccess", "DataAccess")
                        .WithMany("BudgetPlanBases")
                        .HasForeignKey("DataAccessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BudgetPlanEntity");

                    b.Navigation("DataAccess");
                });

            modelBuilder.Entity("BudgetPlan.Domain.Entities.BudgetPlanDetails", b =>
                {
                    b.HasOne("BudgetPlan.Domain.Entities.BudgetPlanBase", "BudgetPlanBase")
                        .WithMany("BudgetPlanDetailsList")
                        .HasForeignKey("BudgetPlanBaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BudgetPlan.Domain.Entities.DataAccess", "DataAccess")
                        .WithMany("BudgetPlanDetails")
                        .HasForeignKey("DataAccessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BudgetPlan.Domain.Entities.TransactionCategory", "TransactionCategory")
                        .WithMany("BudgetPlanDetails")
                        .HasForeignKey("TransactionCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BudgetPlanBase");

                    b.Navigation("DataAccess");

                    b.Navigation("TransactionCategory");
                });

            modelBuilder.Entity("BudgetPlan.Domain.Entities.BudgetPlanEntity", b =>
                {
                    b.HasOne("BudgetPlan.Domain.Entities.DataAccess", "DataAccess")
                        .WithMany("BudgetPlanEntities")
                        .HasForeignKey("DataAccessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DataAccess");
                });

            modelBuilder.Entity("BudgetPlan.Domain.Entities.TransactionCategory", b =>
                {
                    b.HasOne("BudgetPlan.Domain.Entities.DataAccess", "Access")
                        .WithMany("TransactionCategories")
                        .HasForeignKey("AccessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BudgetPlan.Domain.Entities.BudgetPlanEntity", "BudgetPlan")
                        .WithMany("TransactionCategories")
                        .HasForeignKey("BudgetPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BudgetPlan.Domain.Entities.TransactionCategory", "OverTransactionCategory")
                        .WithMany("SubTransactionCategories")
                        .HasForeignKey("OverTransactionCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Access");

                    b.Navigation("BudgetPlan");

                    b.Navigation("OverTransactionCategory");
                });

            modelBuilder.Entity("BudgetPlan.Domain.Entities.TransactionDetail", b =>
                {
                    b.HasOne("BudgetPlan.Domain.Entities.DataAccess", "Access")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("AccessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BudgetPlan.Domain.Entities.TransactionCategory", "TransactionCategory")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("TransactionCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Access");

                    b.Navigation("TransactionCategory");
                });

            modelBuilder.Entity("BudgetPlan.Domain.Entities.BudgetPlanBase", b =>
                {
                    b.Navigation("BudgetPlanDetailsList");
                });

            modelBuilder.Entity("BudgetPlan.Domain.Entities.BudgetPlanEntity", b =>
                {
                    b.Navigation("BudgetPlanBases");

                    b.Navigation("TransactionCategories");
                });

            modelBuilder.Entity("BudgetPlan.Domain.Entities.DataAccess", b =>
                {
                    b.Navigation("AccessedPersons");

                    b.Navigation("BudgetPlanBases");

                    b.Navigation("BudgetPlanDetails");

                    b.Navigation("BudgetPlanEntities");

                    b.Navigation("TransactionCategories");

                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("BudgetPlan.Domain.Entities.TransactionCategory", b =>
                {
                    b.Navigation("BudgetPlanDetails");

                    b.Navigation("SubTransactionCategories");

                    b.Navigation("TransactionDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
